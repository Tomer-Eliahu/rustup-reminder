name: CI

on:
  push:
    branches:
      - main
      - functionality
  schedule:
    - cron: "0 6 * * 5"   # <=== If you want to change this value, this is helpful: https://crontab.guru .
  
  workflow_dispatch: #Enables manual run of this workflow

#fail-fast: false makes all jobs run to completion (otherwise if one job fails, then the rest are cancelled)
jobs:
  build_up_to_date: #uses the latest stable version of Rust
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout #Clones the repository to the runner
      uses: actions/checkout@v4
    - name: rustup toolchain install
      uses: dtolnay/rust-toolchain@stable
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    - run: npm install
    - run: xvfb-run -a npm test
      if: runner.os == 'Linux'
    - run: npm test
      if: runner.os != 'Linux'

  build_out_of_date: #uses an outdated stable version of Rust AND checks rust stable is updated (since we set auto-update = true in one of the extension tests)
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env: 
      #We set these env variables at the JOB level (this makes them scoped at the JOB level)
      INITIAL_RUST_VERSION: ''
      UPDATED_RUST_VERSION: ''
    steps:
    - name: Checkout #Clones the repository to the runner
      uses: actions/checkout@v4

      #uninstall stable rust (GitHub runners come with latest stable rust installed).
    - run: rustup toolchain uninstall stable

    - name: rustup toolchain install
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.81 #Installs rust 1.81 (an outdated version) and sets that as the default toolchain


    #check we do NOT have the latest stable version
    - run: rustup show

    #LOG output of rustc --version and save it in env varaible
    - name: set up env var that is the initial Rust version
      shell: bash #The default on non-Windows. Note this only impacts this step
      run: echo "INITIAL_RUST_VERSION="$(rustc --version)"" >> $GITHUB_ENV
    - shell: bash #The default on non-Windows. Note this only impacts this step
      run: echo "The value of INITIAL_RUST_VERSION is ${{ env.INITIAL_RUST_VERSION }} "


    #Install Node and run our tests
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    - run: npm install
    - run: xvfb-run -a npm test
      if: runner.os == 'Linux'
    - run: npm test
      if: runner.os != 'Linux'

    #Stable Rust should have been updated

    #check default stable is now the latest version of stable
    - run: rustup show

    #Since the default tool chain was set to the outdated version of rust, we also MUST run this
    - run: rustup toolchain uninstall 1.81 #uninstall that outdated version we installed above.
      #This:
      #- run: rustup default stable #this changes the default toolchain to the latest version of stable installed (apparently)
      #is not good as it installs the latest stable version of rust so we can't tell if our test worked.
    
    #LOG output of rustc --version (that should now be different as rust should have been updated) and save it in env varaible
    - name: set up env var that is the updated Rust version
      shell: bash #The default on non-Windows. Note this only impacts this step
      run: echo "UPDATED_RUST_VERSION="$(rustc --version)"" >> $GITHUB_ENV
    - shell: bash #The default on non-Windows. Note this only impacts this step
      run: echo "The value of UPDATED_RUST_VERSION is ${{ env.UPDATED_RUST_VERSION }} "


    - name: check if rust was updated (assert the env variables are not equal)
      shell: bash
      if: ${{ env.INITIAL_RUST_VERSION == env.UPDATED_RUST_VERSION }}
      run: exit 1 #causes the job to fail